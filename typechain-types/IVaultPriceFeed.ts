/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IVaultPriceFeedInterface extends utils.Interface {
  functions: {
    "adjustmentBasisPoints(address)": FunctionFragment;
    "getAmmPrice(address)": FunctionFragment;
    "getLatestPrimaryPrice(address)": FunctionFragment;
    "getPrice(address,bool,bool,bool)": FunctionFragment;
    "getPrimaryPrice(address,bool)": FunctionFragment;
    "isAdjustmentAdditive(address)": FunctionFragment;
    "setAdjustment(address,bool,uint256)": FunctionFragment;
    "setFavorPrimaryPrice(bool)": FunctionFragment;
    "setIsAmmEnabled(bool)": FunctionFragment;
    "setIsSecondaryPriceEnabled(bool)": FunctionFragment;
    "setMaxStrictPriceDeviation(uint256)": FunctionFragment;
    "setPriceSampleSpace(uint256)": FunctionFragment;
    "setSpreadBasisPoints(address,uint256)": FunctionFragment;
    "setSpreadThresholdBasisPoints(uint256)": FunctionFragment;
    "setTokenConfig(address,address,uint256,bool)": FunctionFragment;
    "setUseV2Pricing(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustmentBasisPoints"
      | "getAmmPrice"
      | "getLatestPrimaryPrice"
      | "getPrice"
      | "getPrimaryPrice"
      | "isAdjustmentAdditive"
      | "setAdjustment"
      | "setFavorPrimaryPrice"
      | "setIsAmmEnabled"
      | "setIsSecondaryPriceEnabled"
      | "setMaxStrictPriceDeviation"
      | "setPriceSampleSpace"
      | "setSpreadBasisPoints"
      | "setSpreadThresholdBasisPoints"
      | "setTokenConfig"
      | "setUseV2Pricing"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustmentBasisPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmmPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrimaryPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdjustmentAdditive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFavorPrimaryPrice",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadThresholdBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustmentBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdjustmentAdditive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFavorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVaultPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustmentBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      _useSwapPricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAdjustmentAdditive(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustmentBasisPoints(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmmPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLatestPrimaryPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    _includeAmmPrice: PromiseOrValue<boolean>,
    _useSwapPricing: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrimaryPrice(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAdjustmentAdditive(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAdjustment(
    _token: PromiseOrValue<string>,
    _isAdditive: PromiseOrValue<boolean>,
    _adjustmentBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFavorPrimaryPrice(
    _favorPrimaryPrice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceSampleSpace: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _token: PromiseOrValue<string>,
    _spreadBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadThresholdBasisPoints(
    _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _priceDecimals: PromiseOrValue<BigNumberish>,
    _isStrictStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _useV2Pricing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustmentBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      _useSwapPricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdjustmentAdditive(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adjustmentBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      _useSwapPricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdjustmentAdditive(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustmentBasisPoints(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      _useSwapPricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdjustmentAdditive(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
