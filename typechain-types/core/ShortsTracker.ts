/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ShortsTrackerInterface extends utils.Interface {
  functions: {
    "MAX_INT256()": FunctionFragment;
    "_getNextGlobalAveragePrice(uint256,uint256,uint256,uint256,int256)": FunctionFragment;
    "data(bytes32)": FunctionFragment;
    "getGlobalShortDelta(address)": FunctionFragment;
    "getNextGlobalShortData(address,address,address,uint256,uint256,bool)": FunctionFragment;
    "getRealisedPnl(address,address,address,uint256,bool)": FunctionFragment;
    "globalShortAveragePrices(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "isGlobalShortDataReady()": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setInitData(address[],uint256[])": FunctionFragment;
    "setIsGlobalShortDataReady(bool)": FunctionFragment;
    "updateGlobalShortData(address,address,address,bool,uint256,uint256,bool)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_INT256"
      | "_getNextGlobalAveragePrice"
      | "data"
      | "getGlobalShortDelta"
      | "getNextGlobalShortData"
      | "getRealisedPnl"
      | "globalShortAveragePrices"
      | "gov"
      | "isGlobalShortDataReady"
      | "isHandler"
      | "setGov"
      | "setHandler"
      | "setInitData"
      | "setIsGlobalShortDataReady"
      | "updateGlobalShortData"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_INT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getNextGlobalAveragePrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "data",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalShortDelta",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextGlobalShortData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealisedPnl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortAveragePrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGlobalShortDataReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitData",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsGlobalShortDataReady",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalShortData",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_INT256", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getNextGlobalAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalShortDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextGlobalShortData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealisedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortAveragePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalShortDataReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsGlobalShortDataReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalShortData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "GlobalShortDataUpdated(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalShortDataUpdated"): EventFragment;
}

export interface GlobalShortDataUpdatedEventObject {
  token: string;
  globalShortSize: BigNumber;
  globalShortAveragePrice: BigNumber;
}
export type GlobalShortDataUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  GlobalShortDataUpdatedEventObject
>;

export type GlobalShortDataUpdatedEventFilter =
  TypedEventFilter<GlobalShortDataUpdatedEvent>;

export interface ShortsTracker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShortsTrackerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_INT256(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getNextGlobalAveragePrice(
      _averagePrice: PromiseOrValue<BigNumberish>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _nextSize: PromiseOrValue<BigNumberish>,
      _delta: PromiseOrValue<BigNumberish>,
      _realisedPnl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    data(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getNextGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRealisedPnl(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isGlobalShortDataReady(overrides?: CallOverrides): Promise<[boolean]>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitData(
      _tokens: PromiseOrValue<string>[],
      _averagePrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsGlobalShortDataReady(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _markPrice: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_INT256(overrides?: CallOverrides): Promise<BigNumber>;

  _getNextGlobalAveragePrice(
    _averagePrice: PromiseOrValue<BigNumberish>,
    _nextPrice: PromiseOrValue<BigNumberish>,
    _nextSize: PromiseOrValue<BigNumberish>,
    _delta: PromiseOrValue<BigNumberish>,
    _realisedPnl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  data(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGlobalShortDelta(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getNextGlobalShortData(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _nextPrice: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isIncrease: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getRealisedPnl(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isIncrease: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortAveragePrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  isGlobalShortDataReady(overrides?: CallOverrides): Promise<boolean>;

  isHandler(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInitData(
    _tokens: PromiseOrValue<string>[],
    _averagePrices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsGlobalShortDataReady(
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGlobalShortData(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _markPrice: PromiseOrValue<BigNumberish>,
    _isIncrease: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_INT256(overrides?: CallOverrides): Promise<BigNumber>;

    _getNextGlobalAveragePrice(
      _averagePrice: PromiseOrValue<BigNumberish>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _nextSize: PromiseOrValue<BigNumberish>,
      _delta: PromiseOrValue<BigNumberish>,
      _realisedPnl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    data(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getNextGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getRealisedPnl(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    isGlobalShortDataReady(overrides?: CallOverrides): Promise<boolean>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitData(
      _tokens: PromiseOrValue<string>[],
      _averagePrices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setIsGlobalShortDataReady(
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _markPrice: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GlobalShortDataUpdated(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      globalShortSize?: null,
      globalShortAveragePrice?: null
    ): GlobalShortDataUpdatedEventFilter;
    GlobalShortDataUpdated(
      token?: PromiseOrValue<string> | null,
      globalShortSize?: null,
      globalShortAveragePrice?: null
    ): GlobalShortDataUpdatedEventFilter;
  };

  estimateGas: {
    MAX_INT256(overrides?: CallOverrides): Promise<BigNumber>;

    _getNextGlobalAveragePrice(
      _averagePrice: PromiseOrValue<BigNumberish>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _nextSize: PromiseOrValue<BigNumberish>,
      _delta: PromiseOrValue<BigNumberish>,
      _realisedPnl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    data(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRealisedPnl(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isGlobalShortDataReady(overrides?: CallOverrides): Promise<BigNumber>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInitData(
      _tokens: PromiseOrValue<string>[],
      _averagePrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsGlobalShortDataReady(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _markPrice: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_INT256(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getNextGlobalAveragePrice(
      _averagePrice: PromiseOrValue<BigNumberish>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _nextSize: PromiseOrValue<BigNumberish>,
      _delta: PromiseOrValue<BigNumberish>,
      _realisedPnl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    data(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalShortDelta(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _nextPrice: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealisedPnl(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGlobalShortDataReady(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInitData(
      _tokens: PromiseOrValue<string>[],
      _averagePrices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsGlobalShortDataReady(
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGlobalShortData(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _markPrice: PromiseOrValue<BigNumberish>,
      _isIncrease: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
