/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VaultPriceFeedInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "MAX_ADJUSTMENT_BASIS_POINTS()": FunctionFragment;
    "MAX_ADJUSTMENT_INTERVAL()": FunctionFragment;
    "MAX_SPREAD_BASIS_POINTS()": FunctionFragment;
    "ONE_USD()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "adjustmentBasisPoints(address)": FunctionFragment;
    "bnb()": FunctionFragment;
    "bnbBusd()": FunctionFragment;
    "btc()": FunctionFragment;
    "btcBnb()": FunctionFragment;
    "chainlinkFlags()": FunctionFragment;
    "eth()": FunctionFragment;
    "ethBnb()": FunctionFragment;
    "favorPrimaryPrice()": FunctionFragment;
    "getAmmPrice(address)": FunctionFragment;
    "getAmmPriceV2(address,bool,uint256)": FunctionFragment;
    "getLatestPrimaryPrice(address)": FunctionFragment;
    "getPairPrice(address,bool)": FunctionFragment;
    "getPrice(address,bool,bool,bool)": FunctionFragment;
    "getPriceV1(address,bool,bool)": FunctionFragment;
    "getPriceV2(address,bool,bool)": FunctionFragment;
    "getPrimaryPrice(address,bool)": FunctionFragment;
    "getSecondaryPrice(address,uint256,bool)": FunctionFragment;
    "gov()": FunctionFragment;
    "isAdjustmentAdditive(address)": FunctionFragment;
    "isAmmEnabled()": FunctionFragment;
    "isSecondaryPriceEnabled()": FunctionFragment;
    "lastAdjustmentTimings(address)": FunctionFragment;
    "maxStrictPriceDeviation()": FunctionFragment;
    "priceDecimals(address)": FunctionFragment;
    "priceFeeds(address)": FunctionFragment;
    "priceSampleSpace()": FunctionFragment;
    "secondaryPriceFeed()": FunctionFragment;
    "setAdjustment(address,bool,uint256)": FunctionFragment;
    "setChainlinkFlags(address)": FunctionFragment;
    "setFavorPrimaryPrice(bool)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIsAmmEnabled(bool)": FunctionFragment;
    "setIsSecondaryPriceEnabled(bool)": FunctionFragment;
    "setMaxStrictPriceDeviation(uint256)": FunctionFragment;
    "setPairs(address,address,address)": FunctionFragment;
    "setPriceSampleSpace(uint256)": FunctionFragment;
    "setSecondaryPriceFeed(address)": FunctionFragment;
    "setSpreadBasisPoints(address,uint256)": FunctionFragment;
    "setSpreadThresholdBasisPoints(uint256)": FunctionFragment;
    "setTokenConfig(address,address,uint256,bool)": FunctionFragment;
    "setTokens(address,address,address)": FunctionFragment;
    "setUseV2Pricing(bool)": FunctionFragment;
    "spreadBasisPoints(address)": FunctionFragment;
    "spreadThresholdBasisPoints()": FunctionFragment;
    "strictStableTokens(address)": FunctionFragment;
    "useV2Pricing()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "MAX_ADJUSTMENT_BASIS_POINTS"
      | "MAX_ADJUSTMENT_INTERVAL"
      | "MAX_SPREAD_BASIS_POINTS"
      | "ONE_USD"
      | "PRICE_PRECISION"
      | "adjustmentBasisPoints"
      | "bnb"
      | "bnbBusd"
      | "btc"
      | "btcBnb"
      | "chainlinkFlags"
      | "eth"
      | "ethBnb"
      | "favorPrimaryPrice"
      | "getAmmPrice"
      | "getAmmPriceV2"
      | "getLatestPrimaryPrice"
      | "getPairPrice"
      | "getPrice"
      | "getPriceV1"
      | "getPriceV2"
      | "getPrimaryPrice"
      | "getSecondaryPrice"
      | "gov"
      | "isAdjustmentAdditive"
      | "isAmmEnabled"
      | "isSecondaryPriceEnabled"
      | "lastAdjustmentTimings"
      | "maxStrictPriceDeviation"
      | "priceDecimals"
      | "priceFeeds"
      | "priceSampleSpace"
      | "secondaryPriceFeed"
      | "setAdjustment"
      | "setChainlinkFlags"
      | "setFavorPrimaryPrice"
      | "setGov"
      | "setIsAmmEnabled"
      | "setIsSecondaryPriceEnabled"
      | "setMaxStrictPriceDeviation"
      | "setPairs"
      | "setPriceSampleSpace"
      | "setSecondaryPriceFeed"
      | "setSpreadBasisPoints"
      | "setSpreadThresholdBasisPoints"
      | "setTokenConfig"
      | "setTokens"
      | "setUseV2Pricing"
      | "spreadBasisPoints"
      | "spreadThresholdBasisPoints"
      | "strictStableTokens"
      | "useV2Pricing"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ADJUSTMENT_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ADJUSTMENT_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SPREAD_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_USD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustmentBasisPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "bnb", values?: undefined): string;
  encodeFunctionData(functionFragment: "bnbBusd", values?: undefined): string;
  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(functionFragment: "btcBnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chainlinkFlags",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethBnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "favorPrimaryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmmPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmmPriceV2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrimaryPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceV1",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceV2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAdjustmentAdditive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAmmEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSecondaryPriceEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAdjustmentTimings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxStrictPriceDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceDecimals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSampleSpace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFlags",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFavorPrimaryPrice",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadThresholdBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadBasisPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadThresholdBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strictStableTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "useV2Pricing",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ADJUSTMENT_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ADJUSTMENT_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SPREAD_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_USD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustmentBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bnbBusd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcBnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethBnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "favorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPriceV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAdjustmentAdditive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAdjustmentTimings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFavorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strictStableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useV2Pricing",
    data: BytesLike
  ): Result;

  events: {};
}

export interface VaultPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ADJUSTMENT_BASIS_POINTS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_ADJUSTMENT_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SPREAD_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_USD(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustmentBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bnb(overrides?: CallOverrides): Promise<[string]>;

    bnbBusd(overrides?: CallOverrides): Promise<[string]>;

    btc(overrides?: CallOverrides): Promise<[string]>;

    btcBnb(overrides?: CallOverrides): Promise<[string]>;

    chainlinkFlags(overrides?: CallOverrides): Promise<[string]>;

    eth(overrides?: CallOverrides): Promise<[string]>;

    ethBnb(overrides?: CallOverrides): Promise<[string]>;

    favorPrimaryPrice(overrides?: CallOverrides): Promise<[boolean]>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmmPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _primaryPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPairPrice(
      _pair: PromiseOrValue<string>,
      _divByReserve0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceV1(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSecondaryPrice(
      _token: PromiseOrValue<string>,
      _referencePrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isAdjustmentAdditive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAmmEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isSecondaryPriceEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    lastAdjustmentTimings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxStrictPriceDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    priceSampleSpace(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondaryPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainlinkFlags(
      _chainlinkFlags: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPairs(
      _bnbBusd: PromiseOrValue<string>,
      _ethBnb: PromiseOrValue<string>,
      _btcBnb: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecondaryPriceFeed(
      _secondaryPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokens(
      _btc: PromiseOrValue<string>,
      _eth: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spreadBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    spreadThresholdBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    strictStableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    useV2Pricing(overrides?: CallOverrides): Promise<[boolean]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ADJUSTMENT_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ADJUSTMENT_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SPREAD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_USD(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  adjustmentBasisPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bnb(overrides?: CallOverrides): Promise<string>;

  bnbBusd(overrides?: CallOverrides): Promise<string>;

  btc(overrides?: CallOverrides): Promise<string>;

  btcBnb(overrides?: CallOverrides): Promise<string>;

  chainlinkFlags(overrides?: CallOverrides): Promise<string>;

  eth(overrides?: CallOverrides): Promise<string>;

  ethBnb(overrides?: CallOverrides): Promise<string>;

  favorPrimaryPrice(overrides?: CallOverrides): Promise<boolean>;

  getAmmPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmmPriceV2(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    _primaryPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLatestPrimaryPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPairPrice(
    _pair: PromiseOrValue<string>,
    _divByReserve0: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    _includeAmmPrice: PromiseOrValue<boolean>,
    arg3: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceV1(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    _includeAmmPrice: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceV2(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    _includeAmmPrice: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrimaryPrice(
    _token: PromiseOrValue<string>,
    _maximise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSecondaryPrice(
    _token: PromiseOrValue<string>,
    _referencePrice: PromiseOrValue<BigNumberish>,
    _maximise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  isAdjustmentAdditive(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAmmEnabled(overrides?: CallOverrides): Promise<boolean>;

  isSecondaryPriceEnabled(overrides?: CallOverrides): Promise<boolean>;

  lastAdjustmentTimings(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxStrictPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  priceDecimals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeeds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  priceSampleSpace(overrides?: CallOverrides): Promise<BigNumber>;

  secondaryPriceFeed(overrides?: CallOverrides): Promise<string>;

  setAdjustment(
    _token: PromiseOrValue<string>,
    _isAdditive: PromiseOrValue<boolean>,
    _adjustmentBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainlinkFlags(
    _chainlinkFlags: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFavorPrimaryPrice(
    _favorPrimaryPrice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPairs(
    _bnbBusd: PromiseOrValue<string>,
    _ethBnb: PromiseOrValue<string>,
    _btcBnb: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceSampleSpace: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecondaryPriceFeed(
    _secondaryPriceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _token: PromiseOrValue<string>,
    _spreadBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadThresholdBasisPoints(
    _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _priceDecimals: PromiseOrValue<BigNumberish>,
    _isStrictStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokens(
    _btc: PromiseOrValue<string>,
    _eth: PromiseOrValue<string>,
    _bnb: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _useV2Pricing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spreadBasisPoints(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  spreadThresholdBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  strictStableTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  useV2Pricing(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ADJUSTMENT_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ADJUSTMENT_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SPREAD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustmentBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bnb(overrides?: CallOverrides): Promise<string>;

    bnbBusd(overrides?: CallOverrides): Promise<string>;

    btc(overrides?: CallOverrides): Promise<string>;

    btcBnb(overrides?: CallOverrides): Promise<string>;

    chainlinkFlags(overrides?: CallOverrides): Promise<string>;

    eth(overrides?: CallOverrides): Promise<string>;

    ethBnb(overrides?: CallOverrides): Promise<string>;

    favorPrimaryPrice(overrides?: CallOverrides): Promise<boolean>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _primaryPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairPrice(
      _pair: PromiseOrValue<string>,
      _divByReserve0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceV1(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondaryPrice(
      _token: PromiseOrValue<string>,
      _referencePrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    isAdjustmentAdditive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAmmEnabled(overrides?: CallOverrides): Promise<boolean>;

    isSecondaryPriceEnabled(overrides?: CallOverrides): Promise<boolean>;

    lastAdjustmentTimings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxStrictPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    priceDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    priceSampleSpace(overrides?: CallOverrides): Promise<BigNumber>;

    secondaryPriceFeed(overrides?: CallOverrides): Promise<string>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkFlags(
      _chainlinkFlags: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairs(
      _bnbBusd: PromiseOrValue<string>,
      _ethBnb: PromiseOrValue<string>,
      _btcBnb: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecondaryPriceFeed(
      _secondaryPriceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokens(
      _btc: PromiseOrValue<string>,
      _eth: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    spreadBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadThresholdBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    strictStableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    useV2Pricing(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ADJUSTMENT_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ADJUSTMENT_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SPREAD_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_USD(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustmentBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bnb(overrides?: CallOverrides): Promise<BigNumber>;

    bnbBusd(overrides?: CallOverrides): Promise<BigNumber>;

    btc(overrides?: CallOverrides): Promise<BigNumber>;

    btcBnb(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkFlags(overrides?: CallOverrides): Promise<BigNumber>;

    eth(overrides?: CallOverrides): Promise<BigNumber>;

    ethBnb(overrides?: CallOverrides): Promise<BigNumber>;

    favorPrimaryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmmPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _primaryPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairPrice(
      _pair: PromiseOrValue<string>,
      _divByReserve0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceV1(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondaryPrice(
      _token: PromiseOrValue<string>,
      _referencePrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isAdjustmentAdditive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAmmEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isSecondaryPriceEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    lastAdjustmentTimings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxStrictPriceDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    priceDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceSampleSpace(overrides?: CallOverrides): Promise<BigNumber>;

    secondaryPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainlinkFlags(
      _chainlinkFlags: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPairs(
      _bnbBusd: PromiseOrValue<string>,
      _ethBnb: PromiseOrValue<string>,
      _btcBnb: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecondaryPriceFeed(
      _secondaryPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokens(
      _btc: PromiseOrValue<string>,
      _eth: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spreadBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadThresholdBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    strictStableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    useV2Pricing(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ADJUSTMENT_BASIS_POINTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ADJUSTMENT_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SPREAD_BASIS_POINTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustmentBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbBusd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcBnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkFlags(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    favorPrimaryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmmPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmmPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _primaryPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPrimaryPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairPrice(
      _pair: PromiseOrValue<string>,
      _divByReserve0: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      arg3: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceV1(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceV2(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      _includeAmmPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryPrice(
      _token: PromiseOrValue<string>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondaryPrice(
      _token: PromiseOrValue<string>,
      _referencePrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdjustmentAdditive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAmmEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSecondaryPriceEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastAdjustmentTimings(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxStrictPriceDeviation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceSampleSpace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondaryPriceFeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkFlags(
      _chainlinkFlags: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFavorPrimaryPrice(
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPairs(
      _bnbBusd: PromiseOrValue<string>,
      _ethBnb: PromiseOrValue<string>,
      _btcBnb: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecondaryPriceFeed(
      _secondaryPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadThresholdBasisPoints(
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokens(
      _btc: PromiseOrValue<string>,
      _eth: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spreadBasisPoints(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spreadThresholdBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strictStableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    useV2Pricing(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
