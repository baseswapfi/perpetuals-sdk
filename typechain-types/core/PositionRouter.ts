/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PositionRouterInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "callbackGasLimit()": FunctionFragment;
    "cancelDecreasePosition(bytes32,address)": FunctionFragment;
    "cancelIncreasePosition(bytes32,address)": FunctionFragment;
    "createDecreasePosition(address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,bool,address)": FunctionFragment;
    "createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32,address)": FunctionFragment;
    "createIncreasePositionETH(address[],address,uint256,uint256,bool,uint256,uint256,bytes32,address)": FunctionFragment;
    "customCallbackGasLimits(address)": FunctionFragment;
    "decreasePositionRequestKeys(uint256)": FunctionFragment;
    "decreasePositionRequestKeysStart()": FunctionFragment;
    "decreasePositionRequests(bytes32)": FunctionFragment;
    "decreasePositionsIndex(address)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "ethTransferGasLimit()": FunctionFragment;
    "executeDecreasePosition(bytes32,address)": FunctionFragment;
    "executeDecreasePositions(uint256,address)": FunctionFragment;
    "executeIncreasePosition(bytes32,address)": FunctionFragment;
    "executeIncreasePositions(uint256,address)": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "getDecreasePositionRequestPath(bytes32)": FunctionFragment;
    "getIncreasePositionRequestPath(bytes32)": FunctionFragment;
    "getRequestKey(address,uint256)": FunctionFragment;
    "getRequestQueueLengths()": FunctionFragment;
    "gov()": FunctionFragment;
    "increasePositionBufferBps()": FunctionFragment;
    "increasePositionRequestKeys(uint256)": FunctionFragment;
    "increasePositionRequestKeysStart()": FunctionFragment;
    "increasePositionRequests(bytes32)": FunctionFragment;
    "increasePositionsIndex(address)": FunctionFragment;
    "isLeverageEnabled()": FunctionFragment;
    "isPositionKeeper(address)": FunctionFragment;
    "maxGlobalLongSizes(address)": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "maxTimeDelay()": FunctionFragment;
    "minBlockDelayKeeper()": FunctionFragment;
    "minExecutionFee()": FunctionFragment;
    "minTimeDelayPublic()": FunctionFragment;
    "referralStorage()": FunctionFragment;
    "router()": FunctionFragment;
    "sendValue(address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setCallbackGasLimit(uint256)": FunctionFragment;
    "setCustomCallbackGasLimit(address,uint256)": FunctionFragment;
    "setDelayValues(uint256,uint256,uint256)": FunctionFragment;
    "setDepositFee(uint256)": FunctionFragment;
    "setEthTransferGasLimit(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIncreasePositionBufferBps(uint256)": FunctionFragment;
    "setIsLeverageEnabled(bool)": FunctionFragment;
    "setMaxGlobalSizes(address[],uint256[],uint256[])": FunctionFragment;
    "setMinExecutionFee(uint256)": FunctionFragment;
    "setPositionKeeper(address,bool)": FunctionFragment;
    "setReferralStorage(address)": FunctionFragment;
    "setRequestKeysStartValues(uint256,uint256)": FunctionFragment;
    "shortsTracker()": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "admin"
      | "approve"
      | "callbackGasLimit"
      | "cancelDecreasePosition"
      | "cancelIncreasePosition"
      | "createDecreasePosition"
      | "createIncreasePosition"
      | "createIncreasePositionETH"
      | "customCallbackGasLimits"
      | "decreasePositionRequestKeys"
      | "decreasePositionRequestKeysStart"
      | "decreasePositionRequests"
      | "decreasePositionsIndex"
      | "depositFee"
      | "ethTransferGasLimit"
      | "executeDecreasePosition"
      | "executeDecreasePositions"
      | "executeIncreasePosition"
      | "executeIncreasePositions"
      | "feeReserves"
      | "getDecreasePositionRequestPath"
      | "getIncreasePositionRequestPath"
      | "getRequestKey"
      | "getRequestQueueLengths"
      | "gov"
      | "increasePositionBufferBps"
      | "increasePositionRequestKeys"
      | "increasePositionRequestKeysStart"
      | "increasePositionRequests"
      | "increasePositionsIndex"
      | "isLeverageEnabled"
      | "isPositionKeeper"
      | "maxGlobalLongSizes"
      | "maxGlobalShortSizes"
      | "maxTimeDelay"
      | "minBlockDelayKeeper"
      | "minExecutionFee"
      | "minTimeDelayPublic"
      | "referralStorage"
      | "router"
      | "sendValue"
      | "setAdmin"
      | "setCallbackGasLimit"
      | "setCustomCallbackGasLimit"
      | "setDelayValues"
      | "setDepositFee"
      | "setEthTransferGasLimit"
      | "setGov"
      | "setIncreasePositionBufferBps"
      | "setIsLeverageEnabled"
      | "setMaxGlobalSizes"
      | "setMinExecutionFee"
      | "setPositionKeeper"
      | "setReferralStorage"
      | "setRequestKeysStartValues"
      | "shortsTracker"
      | "vault"
      | "weth"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDecreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelIncreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createDecreasePosition",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePosition",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncreasePositionETH",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "customCallbackGasLimits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeys",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionsIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethTransferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDecreasePositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePosition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreasePositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreasePositionRequestPath",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreasePositionRequestPath",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestKey",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQueueLengths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeys",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionsIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeverageEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockDelayKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minExecutionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimeDelayPublic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallbackGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomCallbackGasLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayValues",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthTransferGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionBufferBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExecutionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionKeeper",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestKeysStartValues",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shortsTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customCallbackGasLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDecreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreasePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreasePositionRequestPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQueueLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockDelayKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimeDelayPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomCallbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestKeysStartValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortsTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "Callback(address,bool,uint256)": EventFragment;
    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "CancelIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetCallbackGasLimit(uint256)": EventFragment;
    "SetCustomCallbackGasLimit(address,uint256)": EventFragment;
    "SetDelayValues(uint256,uint256,uint256)": EventFragment;
    "SetDepositFee(uint256)": EventFragment;
    "SetEthTransferGasLimit(uint256)": EventFragment;
    "SetIncreasePositionBufferBps(uint256)": EventFragment;
    "SetIsLeverageEnabled(bool)": EventFragment;
    "SetMaxGlobalSizes(address[],uint256[],uint256[])": EventFragment;
    "SetMinExecutionFee(uint256)": EventFragment;
    "SetPositionKeeper(address,bool)": EventFragment;
    "SetReferralStorage(address)": EventFragment;
    "SetRequestKeysStartValues(uint256,uint256)": EventFragment;
    "WithdrawFees(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Callback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteDecreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteIncreasePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCallbackGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCustomCallbackGasLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDelayValues"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEthTransferGasLimit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIncreasePositionBufferBps"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsLeverageEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGlobalSizes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinExecutionFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPositionKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralStorage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRequestKeysStartValues"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export interface CallbackEventObject {
  callbackTarget: string;
  success: boolean;
  callbackGasLimit: BigNumber;
}
export type CallbackEvent = TypedEvent<
  [string, boolean, BigNumber],
  CallbackEventObject
>;

export type CallbackEventFilter = TypedEventFilter<CallbackEvent>;

export interface CancelDecreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  receiver: string;
  acceptablePrice: BigNumber;
  minOut: BigNumber;
  executionFee: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type CancelDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CancelDecreasePositionEventObject
>;

export type CancelDecreasePositionEventFilter =
  TypedEventFilter<CancelDecreasePositionEvent>;

export interface CancelIncreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  amountIn: BigNumber;
  minOut: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type CancelIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CancelIncreasePositionEventObject
>;

export type CancelIncreasePositionEventFilter =
  TypedEventFilter<CancelIncreasePositionEvent>;

export interface CreateDecreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  receiver: string;
  acceptablePrice: BigNumber;
  minOut: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
  queueIndex: BigNumber;
  blockNumber: BigNumber;
  blockTime: BigNumber;
}
export type CreateDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CreateDecreasePositionEventObject
>;

export type CreateDecreasePositionEventFilter =
  TypedEventFilter<CreateDecreasePositionEvent>;

export interface CreateIncreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  amountIn: BigNumber;
  minOut: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  index: BigNumber;
  queueIndex: BigNumber;
  blockNumber: BigNumber;
  blockTime: BigNumber;
  gasPrice: BigNumber;
}
export type CreateIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  CreateIncreasePositionEventObject
>;

export type CreateIncreasePositionEventFilter =
  TypedEventFilter<CreateIncreasePositionEvent>;

export interface DecreasePositionReferralEventObject {
  account: string;
  sizeDelta: BigNumber;
  marginFeeBasisPoints: BigNumber;
  referralCode: string;
  referrer: string;
}
export type DecreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  DecreasePositionReferralEventObject
>;

export type DecreasePositionReferralEventFilter =
  TypedEventFilter<DecreasePositionReferralEvent>;

export interface ExecuteDecreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  collateralDelta: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  receiver: string;
  acceptablePrice: BigNumber;
  minOut: BigNumber;
  executionFee: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type ExecuteDecreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ExecuteDecreasePositionEventObject
>;

export type ExecuteDecreasePositionEventFilter =
  TypedEventFilter<ExecuteDecreasePositionEvent>;

export interface ExecuteIncreasePositionEventObject {
  account: string;
  path: string[];
  indexToken: string;
  amountIn: BigNumber;
  minOut: BigNumber;
  sizeDelta: BigNumber;
  isLong: boolean;
  acceptablePrice: BigNumber;
  executionFee: BigNumber;
  blockGap: BigNumber;
  timeGap: BigNumber;
}
export type ExecuteIncreasePositionEvent = TypedEvent<
  [
    string,
    string[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  ExecuteIncreasePositionEventObject
>;

export type ExecuteIncreasePositionEventFilter =
  TypedEventFilter<ExecuteIncreasePositionEvent>;

export interface IncreasePositionReferralEventObject {
  account: string;
  sizeDelta: BigNumber;
  marginFeeBasisPoints: BigNumber;
  referralCode: string;
  referrer: string;
}
export type IncreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  IncreasePositionReferralEventObject
>;

export type IncreasePositionReferralEventFilter =
  TypedEventFilter<IncreasePositionReferralEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetCallbackGasLimitEventObject {
  callbackGasLimit: BigNumber;
}
export type SetCallbackGasLimitEvent = TypedEvent<
  [BigNumber],
  SetCallbackGasLimitEventObject
>;

export type SetCallbackGasLimitEventFilter =
  TypedEventFilter<SetCallbackGasLimitEvent>;

export interface SetCustomCallbackGasLimitEventObject {
  callbackTarget: string;
  callbackGasLimit: BigNumber;
}
export type SetCustomCallbackGasLimitEvent = TypedEvent<
  [string, BigNumber],
  SetCustomCallbackGasLimitEventObject
>;

export type SetCustomCallbackGasLimitEventFilter =
  TypedEventFilter<SetCustomCallbackGasLimitEvent>;

export interface SetDelayValuesEventObject {
  minBlockDelayKeeper: BigNumber;
  minTimeDelayPublic: BigNumber;
  maxTimeDelay: BigNumber;
}
export type SetDelayValuesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SetDelayValuesEventObject
>;

export type SetDelayValuesEventFilter = TypedEventFilter<SetDelayValuesEvent>;

export interface SetDepositFeeEventObject {
  depositFee: BigNumber;
}
export type SetDepositFeeEvent = TypedEvent<
  [BigNumber],
  SetDepositFeeEventObject
>;

export type SetDepositFeeEventFilter = TypedEventFilter<SetDepositFeeEvent>;

export interface SetEthTransferGasLimitEventObject {
  ethTransferGasLimit: BigNumber;
}
export type SetEthTransferGasLimitEvent = TypedEvent<
  [BigNumber],
  SetEthTransferGasLimitEventObject
>;

export type SetEthTransferGasLimitEventFilter =
  TypedEventFilter<SetEthTransferGasLimitEvent>;

export interface SetIncreasePositionBufferBpsEventObject {
  increasePositionBufferBps: BigNumber;
}
export type SetIncreasePositionBufferBpsEvent = TypedEvent<
  [BigNumber],
  SetIncreasePositionBufferBpsEventObject
>;

export type SetIncreasePositionBufferBpsEventFilter =
  TypedEventFilter<SetIncreasePositionBufferBpsEvent>;

export interface SetIsLeverageEnabledEventObject {
  isLeverageEnabled: boolean;
}
export type SetIsLeverageEnabledEvent = TypedEvent<
  [boolean],
  SetIsLeverageEnabledEventObject
>;

export type SetIsLeverageEnabledEventFilter =
  TypedEventFilter<SetIsLeverageEnabledEvent>;

export interface SetMaxGlobalSizesEventObject {
  tokens: string[];
  longSizes: BigNumber[];
  shortSizes: BigNumber[];
}
export type SetMaxGlobalSizesEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]],
  SetMaxGlobalSizesEventObject
>;

export type SetMaxGlobalSizesEventFilter =
  TypedEventFilter<SetMaxGlobalSizesEvent>;

export interface SetMinExecutionFeeEventObject {
  minExecutionFee: BigNumber;
}
export type SetMinExecutionFeeEvent = TypedEvent<
  [BigNumber],
  SetMinExecutionFeeEventObject
>;

export type SetMinExecutionFeeEventFilter =
  TypedEventFilter<SetMinExecutionFeeEvent>;

export interface SetPositionKeeperEventObject {
  account: string;
  isActive: boolean;
}
export type SetPositionKeeperEvent = TypedEvent<
  [string, boolean],
  SetPositionKeeperEventObject
>;

export type SetPositionKeeperEventFilter =
  TypedEventFilter<SetPositionKeeperEvent>;

export interface SetReferralStorageEventObject {
  referralStorage: string;
}
export type SetReferralStorageEvent = TypedEvent<
  [string],
  SetReferralStorageEventObject
>;

export type SetReferralStorageEventFilter =
  TypedEventFilter<SetReferralStorageEvent>;

export interface SetRequestKeysStartValuesEventObject {
  increasePositionRequestKeysStart: BigNumber;
  decreasePositionRequestKeysStart: BigNumber;
}
export type SetRequestKeysStartValuesEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetRequestKeysStartValuesEventObject
>;

export type SetRequestKeysStartValuesEventFilter =
  TypedEventFilter<SetRequestKeysStartValuesEvent>;

export interface WithdrawFeesEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFeesEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawFeesEventObject
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface PositionRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createDecreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _withdrawETH: PromiseOrValue<boolean>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    customCallbackGasLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        withdrawETH: boolean;
        callbackTarget: string;
      }
    >;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    >;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxTimeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<[BigNumber]>;

    minExecutionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralStorage(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCallbackGasLimit(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCustomCallbackGasLimit(
      _callbackTarget: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelayValues(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      _decreasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  cancelDecreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelIncreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createDecreasePosition(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _collateralDelta: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _receiver: PromiseOrValue<string>,
    _acceptablePrice: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _executionFee: PromiseOrValue<BigNumberish>,
    _withdrawETH: PromiseOrValue<boolean>,
    _callbackTarget: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreasePosition(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _minOut: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _acceptablePrice: PromiseOrValue<BigNumberish>,
    _executionFee: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BytesLike>,
    _callbackTarget: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createIncreasePositionETH(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _minOut: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _acceptablePrice: PromiseOrValue<BigNumberish>,
    _executionFee: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BytesLike>,
    _callbackTarget: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  customCallbackGasLimits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePositionRequestKeys(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  decreasePositionRequestKeysStart(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreasePositionRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      account: string;
      indexToken: string;
      collateralDelta: BigNumber;
      sizeDelta: BigNumber;
      isLong: boolean;
      receiver: string;
      acceptablePrice: BigNumber;
      minOut: BigNumber;
      executionFee: BigNumber;
      blockNumber: BigNumber;
      blockTime: BigNumber;
      withdrawETH: boolean;
      callbackTarget: string;
    }
  >;

  decreasePositionsIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  executeDecreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeDecreasePositions(
    _endIndex: PromiseOrValue<BigNumberish>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreasePosition(
    _key: PromiseOrValue<BytesLike>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeIncreasePositions(
    _endIndex: PromiseOrValue<BigNumberish>,
    _executionFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeReserves(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDecreasePositionRequestPath(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIncreasePositionRequestPath(
    _key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRequestKey(
    _account: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRequestQueueLengths(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  gov(overrides?: CallOverrides): Promise<string>;

  increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

  increasePositionRequestKeys(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  increasePositionRequestKeysStart(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increasePositionRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      account: string;
      indexToken: string;
      amountIn: BigNumber;
      minOut: BigNumber;
      sizeDelta: BigNumber;
      isLong: boolean;
      acceptablePrice: BigNumber;
      executionFee: BigNumber;
      blockNumber: BigNumber;
      blockTime: BigNumber;
      hasCollateralInETH: boolean;
      callbackTarget: string;
    }
  >;

  increasePositionsIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

  isPositionKeeper(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxGlobalLongSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxGlobalShortSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

  minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

  minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

  referralStorage(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  sendValue(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCallbackGasLimit(
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCustomCallbackGasLimit(
    _callbackTarget: PromiseOrValue<string>,
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelayValues(
    _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
    _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
    _maxTimeDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _depositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEthTransferGasLimit(
    _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIncreasePositionBufferBps(
    _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _isLeverageEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalSizes(
    _tokens: PromiseOrValue<string>[],
    _longSizes: PromiseOrValue<BigNumberish>[],
    _shortSizes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinExecutionFee(
    _minExecutionFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPositionKeeper(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralStorage(
    _referralStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequestKeysStartValues(
    _increasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
    _decreasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shortsTracker(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createDecreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _withdrawETH: PromiseOrValue<boolean>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    customCallbackGasLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        collateralDelta: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        receiver: string;
        acceptablePrice: BigNumber;
        minOut: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        withdrawETH: boolean;
        callbackTarget: string;
      }
    >;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<string>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        account: string;
        indexToken: string;
        amountIn: BigNumber;
        minOut: BigNumber;
        sizeDelta: BigNumber;
        isLong: boolean;
        acceptablePrice: BigNumber;
        executionFee: BigNumber;
        blockNumber: BigNumber;
        blockTime: BigNumber;
        hasCollateralInETH: boolean;
        callbackTarget: string;
      }
    >;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<boolean>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallbackGasLimit(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomCallbackGasLimit(
      _callbackTarget: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelayValues(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      _decreasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shortsTracker(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Callback(address,bool,uint256)"(
      callbackTarget?: null,
      success?: null,
      callbackGasLimit?: null
    ): CallbackEventFilter;
    Callback(
      callbackTarget?: null,
      success?: null,
      callbackGasLimit?: null
    ): CallbackEventFilter;

    "CancelDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelDecreasePositionEventFilter;
    CancelDecreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelDecreasePositionEventFilter;

    "CancelIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelIncreasePositionEventFilter;
    CancelIncreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): CancelIncreasePositionEventFilter;

    "CreateDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null
    ): CreateDecreasePositionEventFilter;
    CreateDecreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null
    ): CreateDecreasePositionEventFilter;

    "CreateIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null,
      gasPrice?: null
    ): CreateIncreasePositionEventFilter;
    CreateIncreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      index?: null,
      queueIndex?: null,
      blockNumber?: null,
      blockTime?: null,
      gasPrice?: null
    ): CreateIncreasePositionEventFilter;

    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): DecreasePositionReferralEventFilter;
    DecreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): DecreasePositionReferralEventFilter;

    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteDecreasePositionEventFilter;
    ExecuteDecreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      collateralDelta?: null,
      sizeDelta?: null,
      isLong?: null,
      receiver?: null,
      acceptablePrice?: null,
      minOut?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteDecreasePositionEventFilter;

    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteIncreasePositionEventFilter;
    ExecuteIncreasePosition(
      account?: PromiseOrValue<string> | null,
      path?: null,
      indexToken?: null,
      amountIn?: null,
      minOut?: null,
      sizeDelta?: null,
      isLong?: null,
      acceptablePrice?: null,
      executionFee?: null,
      blockGap?: null,
      timeGap?: null
    ): ExecuteIncreasePositionEventFilter;

    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): IncreasePositionReferralEventFilter;
    IncreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): IncreasePositionReferralEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetCallbackGasLimit(uint256)"(
      callbackGasLimit?: null
    ): SetCallbackGasLimitEventFilter;
    SetCallbackGasLimit(
      callbackGasLimit?: null
    ): SetCallbackGasLimitEventFilter;

    "SetCustomCallbackGasLimit(address,uint256)"(
      callbackTarget?: null,
      callbackGasLimit?: null
    ): SetCustomCallbackGasLimitEventFilter;
    SetCustomCallbackGasLimit(
      callbackTarget?: null,
      callbackGasLimit?: null
    ): SetCustomCallbackGasLimitEventFilter;

    "SetDelayValues(uint256,uint256,uint256)"(
      minBlockDelayKeeper?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null
    ): SetDelayValuesEventFilter;
    SetDelayValues(
      minBlockDelayKeeper?: null,
      minTimeDelayPublic?: null,
      maxTimeDelay?: null
    ): SetDelayValuesEventFilter;

    "SetDepositFee(uint256)"(depositFee?: null): SetDepositFeeEventFilter;
    SetDepositFee(depositFee?: null): SetDepositFeeEventFilter;

    "SetEthTransferGasLimit(uint256)"(
      ethTransferGasLimit?: null
    ): SetEthTransferGasLimitEventFilter;
    SetEthTransferGasLimit(
      ethTransferGasLimit?: null
    ): SetEthTransferGasLimitEventFilter;

    "SetIncreasePositionBufferBps(uint256)"(
      increasePositionBufferBps?: null
    ): SetIncreasePositionBufferBpsEventFilter;
    SetIncreasePositionBufferBps(
      increasePositionBufferBps?: null
    ): SetIncreasePositionBufferBpsEventFilter;

    "SetIsLeverageEnabled(bool)"(
      isLeverageEnabled?: null
    ): SetIsLeverageEnabledEventFilter;
    SetIsLeverageEnabled(
      isLeverageEnabled?: null
    ): SetIsLeverageEnabledEventFilter;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])"(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;
    SetMaxGlobalSizes(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;

    "SetMinExecutionFee(uint256)"(
      minExecutionFee?: null
    ): SetMinExecutionFeeEventFilter;
    SetMinExecutionFee(minExecutionFee?: null): SetMinExecutionFeeEventFilter;

    "SetPositionKeeper(address,bool)"(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetPositionKeeperEventFilter;
    SetPositionKeeper(
      account?: PromiseOrValue<string> | null,
      isActive?: null
    ): SetPositionKeeperEventFilter;

    "SetReferralStorage(address)"(
      referralStorage?: null
    ): SetReferralStorageEventFilter;
    SetReferralStorage(referralStorage?: null): SetReferralStorageEventFilter;

    "SetRequestKeysStartValues(uint256,uint256)"(
      increasePositionRequestKeysStart?: null,
      decreasePositionRequestKeysStart?: null
    ): SetRequestKeysStartValuesEventFilter;
    SetRequestKeysStartValues(
      increasePositionRequestKeysStart?: null,
      decreasePositionRequestKeysStart?: null
    ): SetRequestKeysStartValuesEventFilter;

    "WithdrawFees(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callbackGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createDecreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _withdrawETH: PromiseOrValue<boolean>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    customCallbackGasLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQueueLengths(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxTimeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockDelayKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    minTimeDelayPublic(overrides?: CallOverrides): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCallbackGasLimit(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCustomCallbackGasLimit(
      _callbackTarget: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelayValues(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      _decreasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shortsTracker(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callbackGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createDecreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _collateralDelta: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _receiver: PromiseOrValue<string>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _withdrawETH: PromiseOrValue<boolean>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePosition(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    customCallbackGasLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethTransferGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeDecreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeDecreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreasePosition(
      _key: PromiseOrValue<BytesLike>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeIncreasePositions(
      _endIndex: PromiseOrValue<BigNumberish>,
      _executionFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncreasePositionRequestPath(
      _key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestKey(
      _account: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestQueueLengths(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePositionBufferBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequestKeys(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequestKeysStart(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increasePositionsIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeverageEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPositionKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockDelayKeeper(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minExecutionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimeDelayPublic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCallbackGasLimit(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCustomCallbackGasLimit(
      _callbackTarget: PromiseOrValue<string>,
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelayValues(
      _minBlockDelayKeeper: PromiseOrValue<BigNumberish>,
      _minTimeDelayPublic: PromiseOrValue<BigNumberish>,
      _maxTimeDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinExecutionFee(
      _minExecutionFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPositionKeeper(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequestKeysStartValues(
      _increasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      _decreasePositionRequestKeysStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
