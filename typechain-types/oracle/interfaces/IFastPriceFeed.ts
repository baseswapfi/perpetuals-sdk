/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFastPriceFeedInterface extends utils.Interface {
  functions: {
    "lastUpdatedAt()": FunctionFragment;
    "lastUpdatedBlock()": FunctionFragment;
    "setIsSpreadEnabled(bool)": FunctionFragment;
    "setMaxCumulativeDeltaDiffs(address[],uint256[])": FunctionFragment;
    "setMaxDeviationBasisPoints(uint256)": FunctionFragment;
    "setMaxPriceUpdateDelay(uint256)": FunctionFragment;
    "setMinBlockInterval(uint256)": FunctionFragment;
    "setPriceDataInterval(uint256)": FunctionFragment;
    "setPriceDuration(uint256)": FunctionFragment;
    "setSigner(address,bool)": FunctionFragment;
    "setSpreadBasisPointsIfChainError(uint256)": FunctionFragment;
    "setSpreadBasisPointsIfInactive(uint256)": FunctionFragment;
    "setUpdater(address,bool)": FunctionFragment;
    "setVaultPriceFeed(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "lastUpdatedAt"
      | "lastUpdatedBlock"
      | "setIsSpreadEnabled"
      | "setMaxCumulativeDeltaDiffs"
      | "setMaxDeviationBasisPoints"
      | "setMaxPriceUpdateDelay"
      | "setMinBlockInterval"
      | "setPriceDataInterval"
      | "setPriceDuration"
      | "setSigner"
      | "setSpreadBasisPointsIfChainError"
      | "setSpreadBasisPointsIfInactive"
      | "setUpdater"
      | "setVaultPriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "lastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSpreadEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceUpdateDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDataInterval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfChainError",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfInactive",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "lastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDataInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPriceFeed",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFastPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFastPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setIsSpreadEnabled(
    _isSpreadEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxCumulativeDeltaDiffs(
    _tokens: PromiseOrValue<string>[],
    _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDeviationBasisPoints(
    _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceUpdateDelay(
    _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBlockInterval(
    _minBlockInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceDataInterval(
    _priceDataInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceDuration(
    _priceDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfChainError(
    _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfInactive(
    _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdater(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultPriceFeed(
    _vaultPriceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lastUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
