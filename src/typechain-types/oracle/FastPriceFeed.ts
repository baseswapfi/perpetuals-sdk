/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FastPriceFeedInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "BITMASK_32()": FunctionFragment;
    "CUMULATIVE_DELTA_PRECISION()": FunctionFragment;
    "MAX_CUMULATIVE_FAST_DELTA()": FunctionFragment;
    "MAX_CUMULATIVE_REF_DELTA()": FunctionFragment;
    "MAX_PRICE_DURATION()": FunctionFragment;
    "MAX_REF_PRICE()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "disableFastPrice()": FunctionFragment;
    "disableFastPriceVoteCount()": FunctionFragment;
    "disableFastPriceVotes(address)": FunctionFragment;
    "enableFastPrice()": FunctionFragment;
    "fastPriceEvents()": FunctionFragment;
    "favorFastPrice(address)": FunctionFragment;
    "getPrice(address,uint256,bool)": FunctionFragment;
    "getPriceData(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(uint256,address[],address[])": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "isSpreadEnabled()": FunctionFragment;
    "isUpdater(address)": FunctionFragment;
    "lastUpdatedAt()": FunctionFragment;
    "lastUpdatedBlock()": FunctionFragment;
    "maxCumulativeDeltaDiffs(address)": FunctionFragment;
    "maxDeviationBasisPoints()": FunctionFragment;
    "maxPriceUpdateDelay()": FunctionFragment;
    "maxTimeDeviation()": FunctionFragment;
    "minAuthorizations()": FunctionFragment;
    "minBlockInterval()": FunctionFragment;
    "priceData(address)": FunctionFragment;
    "priceDataInterval()": FunctionFragment;
    "priceDuration()": FunctionFragment;
    "prices(address)": FunctionFragment;
    "setCompactedPrices(uint256[],uint256)": FunctionFragment;
    "setFastPriceEvents(address)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIsSpreadEnabled(bool)": FunctionFragment;
    "setLastUpdatedAt(uint256)": FunctionFragment;
    "setMaxCumulativeDeltaDiffs(address[],uint256[])": FunctionFragment;
    "setMaxDeviationBasisPoints(uint256)": FunctionFragment;
    "setMaxPriceUpdateDelay(uint256)": FunctionFragment;
    "setMaxTimeDeviation(uint256)": FunctionFragment;
    "setMinAuthorizations(uint256)": FunctionFragment;
    "setMinBlockInterval(uint256)": FunctionFragment;
    "setPriceDataInterval(uint256)": FunctionFragment;
    "setPriceDuration(uint256)": FunctionFragment;
    "setPrices(address[],uint256[],uint256)": FunctionFragment;
    "setPricesWithBits(uint256,uint256)": FunctionFragment;
    "setPricesWithBitsAndExecute(address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setSigner(address,bool)": FunctionFragment;
    "setSpreadBasisPointsIfChainError(uint256)": FunctionFragment;
    "setSpreadBasisPointsIfInactive(uint256)": FunctionFragment;
    "setTokenManager(address)": FunctionFragment;
    "setTokens(address[],uint256[])": FunctionFragment;
    "setUpdater(address,bool)": FunctionFragment;
    "setVaultPriceFeed(address)": FunctionFragment;
    "spreadBasisPointsIfChainError()": FunctionFragment;
    "spreadBasisPointsIfInactive()": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "tokenPrecisions(uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "vaultPriceFeed()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "BITMASK_32"
      | "CUMULATIVE_DELTA_PRECISION"
      | "MAX_CUMULATIVE_FAST_DELTA"
      | "MAX_CUMULATIVE_REF_DELTA"
      | "MAX_PRICE_DURATION"
      | "MAX_REF_PRICE"
      | "PRICE_PRECISION"
      | "disableFastPrice"
      | "disableFastPriceVoteCount"
      | "disableFastPriceVotes"
      | "enableFastPrice"
      | "fastPriceEvents"
      | "favorFastPrice"
      | "getPrice"
      | "getPriceData"
      | "gov"
      | "initialize"
      | "isInitialized"
      | "isSigner"
      | "isSpreadEnabled"
      | "isUpdater"
      | "lastUpdatedAt"
      | "lastUpdatedBlock"
      | "maxCumulativeDeltaDiffs"
      | "maxDeviationBasisPoints"
      | "maxPriceUpdateDelay"
      | "maxTimeDeviation"
      | "minAuthorizations"
      | "minBlockInterval"
      | "priceData"
      | "priceDataInterval"
      | "priceDuration"
      | "prices"
      | "setCompactedPrices"
      | "setFastPriceEvents"
      | "setGov"
      | "setIsSpreadEnabled"
      | "setLastUpdatedAt"
      | "setMaxCumulativeDeltaDiffs"
      | "setMaxDeviationBasisPoints"
      | "setMaxPriceUpdateDelay"
      | "setMaxTimeDeviation"
      | "setMinAuthorizations"
      | "setMinBlockInterval"
      | "setPriceDataInterval"
      | "setPriceDuration"
      | "setPrices"
      | "setPricesWithBits"
      | "setPricesWithBitsAndExecute"
      | "setSigner"
      | "setSpreadBasisPointsIfChainError"
      | "setSpreadBasisPointsIfInactive"
      | "setTokenManager"
      | "setTokens"
      | "setUpdater"
      | "setVaultPriceFeed"
      | "spreadBasisPointsIfChainError"
      | "spreadBasisPointsIfInactive"
      | "tokenManager"
      | "tokenPrecisions"
      | "tokens"
      | "vaultPriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BITMASK_32",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CUMULATIVE_DELTA_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CUMULATIVE_FAST_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CUMULATIVE_REF_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REF_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFastPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFastPriceVoteCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableFastPriceVotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableFastPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fastPriceEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "favorFastPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpreadEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCumulativeDeltaDiffs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeviationBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceUpdateDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimeDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBlockInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceDataInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompactedPrices",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFastPriceEvents",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSpreadEnabled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastUpdatedAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceUpdateDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTimeDeviation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuthorizations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDataInterval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesWithBits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesWithBitsAndExecute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfChainError",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfInactive",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadBasisPointsIfChainError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spreadBasisPointsIfInactive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrecisions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPriceFeed",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BITMASK_32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CUMULATIVE_DELTA_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CUMULATIVE_FAST_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CUMULATIVE_REF_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REF_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFastPriceVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableFastPriceVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableFastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fastPriceEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "favorFastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimeDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDataInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCompactedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFastPriceEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTimeDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDataInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricesWithBits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricesWithBitsAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrecisions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultPriceFeed",
    data: BytesLike
  ): Result;

  events: {
    "DisableFastPrice(address)": EventFragment;
    "EnableFastPrice(address)": EventFragment;
    "MaxCumulativeDeltaDiffExceeded(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PriceData(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisableFastPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableFastPrice"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MaxCumulativeDeltaDiffExceeded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceData"): EventFragment;
}

export interface DisableFastPriceEventObject {
  signer: string;
}
export type DisableFastPriceEvent = TypedEvent<
  [string],
  DisableFastPriceEventObject
>;

export type DisableFastPriceEventFilter =
  TypedEventFilter<DisableFastPriceEvent>;

export interface EnableFastPriceEventObject {
  signer: string;
}
export type EnableFastPriceEvent = TypedEvent<
  [string],
  EnableFastPriceEventObject
>;

export type EnableFastPriceEventFilter = TypedEventFilter<EnableFastPriceEvent>;

export interface MaxCumulativeDeltaDiffExceededEventObject {
  token: string;
  refPrice: BigNumber;
  fastPrice: BigNumber;
  cumulativeRefDelta: BigNumber;
  cumulativeFastDelta: BigNumber;
}
export type MaxCumulativeDeltaDiffExceededEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  MaxCumulativeDeltaDiffExceededEventObject
>;

export type MaxCumulativeDeltaDiffExceededEventFilter =
  TypedEventFilter<MaxCumulativeDeltaDiffExceededEvent>;

export interface PriceDataEventObject {
  token: string;
  refPrice: BigNumber;
  fastPrice: BigNumber;
  cumulativeRefDelta: BigNumber;
  cumulativeFastDelta: BigNumber;
}
export type PriceDataEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  PriceDataEventObject
>;

export type PriceDataEventFilter = TypedEventFilter<PriceDataEvent>;

export interface FastPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FastPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    BITMASK_32(overrides?: CallOverrides): Promise<[BigNumber]>;

    CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableFastPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableFastPriceVoteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    disableFastPriceVotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enableFastPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fastPriceEvents(overrides?: CallOverrides): Promise<[string]>;

    favorFastPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPrice(
      _token: PromiseOrValue<string>,
      _refPrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceData(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _updaters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isUpdater(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCumulativeDeltaDiffs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPriceUpdateDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuthorizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBlockInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        refPrice: BigNumber;
        refTime: number;
        cumulativeRefDelta: number;
        cumulativeFastDelta: number;
      }
    >;

    priceDataInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setCompactedPrices(
      _priceBitArray: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFastPriceEvents(
      _fastPriceEvents: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLastUpdatedAt(
      _lastUpdatedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxTimeDeviation(
      _maxTimeDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinAuthorizations(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrices(
      _tokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPricesWithBits(
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPricesWithBitsAndExecute(
      _positionRouter: PromiseOrValue<string>,
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _endIndexForIncreasePositions: PromiseOrValue<BigNumberish>,
      _endIndexForDecreasePositions: PromiseOrValue<BigNumberish>,
      _maxIncreasePositions: PromiseOrValue<BigNumberish>,
      _maxDecreasePositions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenManager(
      _tokenManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokens(
      _tokens: PromiseOrValue<string>[],
      _tokenPrecisions: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    spreadBasisPointsIfInactive(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    tokenPrecisions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  BITMASK_32(overrides?: CallOverrides): Promise<BigNumber>;

  CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REF_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  disableFastPrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableFastPriceVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

  disableFastPriceVotes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  enableFastPrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fastPriceEvents(overrides?: CallOverrides): Promise<string>;

  favorFastPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPrice(
    _token: PromiseOrValue<string>,
    _refPrice: PromiseOrValue<BigNumberish>,
    _maximise: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceData(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _minAuthorizations: PromiseOrValue<BigNumberish>,
    _signers: PromiseOrValue<string>[],
    _updaters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isSigner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSpreadEnabled(overrides?: CallOverrides): Promise<boolean>;

  isUpdater(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  maxCumulativeDeltaDiffs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  maxPriceUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

  minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

  minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

  priceData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      refPrice: BigNumber;
      refTime: number;
      cumulativeRefDelta: number;
      cumulativeFastDelta: number;
    }
  >;

  priceDataInterval(overrides?: CallOverrides): Promise<BigNumber>;

  priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

  prices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCompactedPrices(
    _priceBitArray: PromiseOrValue<BigNumberish>[],
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFastPriceEvents(
    _fastPriceEvents: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSpreadEnabled(
    _isSpreadEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLastUpdatedAt(
    _lastUpdatedAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxCumulativeDeltaDiffs(
    _tokens: PromiseOrValue<string>[],
    _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxDeviationBasisPoints(
    _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceUpdateDelay(
    _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxTimeDeviation(
    _maxTimeDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinAuthorizations(
    _minAuthorizations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBlockInterval(
    _minBlockInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceDataInterval(
    _priceDataInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceDuration(
    _priceDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrices(
    _tokens: PromiseOrValue<string>[],
    _prices: PromiseOrValue<BigNumberish>[],
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPricesWithBits(
    _priceBits: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPricesWithBitsAndExecute(
    _positionRouter: PromiseOrValue<string>,
    _priceBits: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _endIndexForIncreasePositions: PromiseOrValue<BigNumberish>,
    _endIndexForDecreasePositions: PromiseOrValue<BigNumberish>,
    _maxIncreasePositions: PromiseOrValue<BigNumberish>,
    _maxDecreasePositions: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfChainError(
    _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfInactive(
    _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenManager(
    _tokenManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokens(
    _tokens: PromiseOrValue<string>[],
    _tokenPrecisions: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdater(
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultPriceFeed(
    _vaultPriceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spreadBasisPointsIfChainError(overrides?: CallOverrides): Promise<BigNumber>;

  spreadBasisPointsIfInactive(overrides?: CallOverrides): Promise<BigNumber>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  tokenPrecisions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  vaultPriceFeed(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    BITMASK_32(overrides?: CallOverrides): Promise<BigNumber>;

    CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPrice(overrides?: CallOverrides): Promise<void>;

    disableFastPriceVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPriceVotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableFastPrice(overrides?: CallOverrides): Promise<void>;

    fastPriceEvents(overrides?: CallOverrides): Promise<string>;

    favorFastPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPrice(
      _token: PromiseOrValue<string>,
      _refPrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _updaters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<boolean>;

    isUpdater(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    maxCumulativeDeltaDiffs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        refPrice: BigNumber;
        refTime: number;
        cumulativeRefDelta: number;
        cumulativeFastDelta: number;
      }
    >;

    priceDataInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCompactedPrices(
      _priceBitArray: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFastPriceEvents(
      _fastPriceEvents: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastUpdatedAt(
      _lastUpdatedAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTimeDeviation(
      _maxTimeDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuthorizations(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrices(
      _tokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricesWithBits(
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricesWithBitsAndExecute(
      _positionRouter: PromiseOrValue<string>,
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _endIndexForIncreasePositions: PromiseOrValue<BigNumberish>,
      _endIndexForDecreasePositions: PromiseOrValue<BigNumberish>,
      _maxIncreasePositions: PromiseOrValue<BigNumberish>,
      _maxDecreasePositions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenManager(
      _tokenManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokens(
      _tokens: PromiseOrValue<string>[],
      _tokenPrecisions: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadBasisPointsIfInactive(overrides?: CallOverrides): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    tokenPrecisions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DisableFastPrice(address)"(signer?: null): DisableFastPriceEventFilter;
    DisableFastPrice(signer?: null): DisableFastPriceEventFilter;

    "EnableFastPrice(address)"(signer?: null): EnableFastPriceEventFilter;
    EnableFastPrice(signer?: null): EnableFastPriceEventFilter;

    "MaxCumulativeDeltaDiffExceeded(address,uint256,uint256,uint256,uint256)"(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): MaxCumulativeDeltaDiffExceededEventFilter;
    MaxCumulativeDeltaDiffExceeded(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): MaxCumulativeDeltaDiffExceededEventFilter;

    "PriceData(address,uint256,uint256,uint256,uint256)"(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): PriceDataEventFilter;
    PriceData(
      token?: null,
      refPrice?: null,
      fastPrice?: null,
      cumulativeRefDelta?: null,
      cumulativeFastDelta?: null
    ): PriceDataEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    BITMASK_32(overrides?: CallOverrides): Promise<BigNumber>;

    CUMULATIVE_DELTA_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_FAST_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CUMULATIVE_REF_DELTA(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableFastPriceVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    disableFastPriceVotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableFastPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fastPriceEvents(overrides?: CallOverrides): Promise<BigNumber>;

    favorFastPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      _refPrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceData(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _updaters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isUpdater(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    maxCumulativeDeltaDiffs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeviationBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    minBlockInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceDataInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceDuration(overrides?: CallOverrides): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCompactedPrices(
      _priceBitArray: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFastPriceEvents(
      _fastPriceEvents: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLastUpdatedAt(
      _lastUpdatedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxTimeDeviation(
      _maxTimeDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinAuthorizations(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrices(
      _tokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPricesWithBits(
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPricesWithBitsAndExecute(
      _positionRouter: PromiseOrValue<string>,
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _endIndexForIncreasePositions: PromiseOrValue<BigNumberish>,
      _endIndexForDecreasePositions: PromiseOrValue<BigNumberish>,
      _maxIncreasePositions: PromiseOrValue<BigNumberish>,
      _maxDecreasePositions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenManager(
      _tokenManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokens(
      _tokens: PromiseOrValue<string>[],
      _tokenPrecisions: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    spreadBasisPointsIfInactive(overrides?: CallOverrides): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPrecisions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BITMASK_32(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CUMULATIVE_DELTA_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_CUMULATIVE_FAST_DELTA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_CUMULATIVE_REF_DELTA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REF_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableFastPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableFastPriceVoteCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableFastPriceVotes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableFastPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fastPriceEvents(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    favorFastPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: PromiseOrValue<string>,
      _refPrice: PromiseOrValue<BigNumberish>,
      _maximise: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceData(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _updaters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSpreadEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUpdater(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdatedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxCumulativeDeltaDiffs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDeviationBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPriceUpdateDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimeDeviation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAuthorizations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBlockInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDataInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCompactedPrices(
      _priceBitArray: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFastPriceEvents(
      _fastPriceEvents: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSpreadEnabled(
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLastUpdatedAt(
      _lastUpdatedAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCumulativeDeltaDiffs(
      _tokens: PromiseOrValue<string>[],
      _maxCumulativeDeltaDiffs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDeviationBasisPoints(
      _maxDeviationBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceUpdateDelay(
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTimeDeviation(
      _maxTimeDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinAuthorizations(
      _minAuthorizations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBlockInterval(
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDataInterval(
      _priceDataInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDuration(
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrices(
      _tokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPricesWithBits(
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPricesWithBitsAndExecute(
      _positionRouter: PromiseOrValue<string>,
      _priceBits: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _endIndexForIncreasePositions: PromiseOrValue<BigNumberish>,
      _endIndexForDecreasePositions: PromiseOrValue<BigNumberish>,
      _maxIncreasePositions: PromiseOrValue<BigNumberish>,
      _maxDecreasePositions: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfChainError(
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfInactive(
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenManager(
      _tokenManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokens(
      _tokens: PromiseOrValue<string>[],
      _tokenPrecisions: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdater(
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPriceFeed(
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spreadBasisPointsIfChainError(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spreadBasisPointsIfInactive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPrecisions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
