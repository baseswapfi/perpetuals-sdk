/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BasePositionManagerInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS_DIVISOR()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "ethTransferGasLimit()": FunctionFragment;
    "feeReserves(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "increasePositionBufferBps()": FunctionFragment;
    "maxGlobalLongSizes(address)": FunctionFragment;
    "maxGlobalShortSizes(address)": FunctionFragment;
    "referralStorage()": FunctionFragment;
    "router()": FunctionFragment;
    "sendValue(address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDepositFee(uint256)": FunctionFragment;
    "setEthTransferGasLimit(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIncreasePositionBufferBps(uint256)": FunctionFragment;
    "setMaxGlobalSizes(address[],uint256[],uint256[])": FunctionFragment;
    "setReferralStorage(address)": FunctionFragment;
    "shortsTracker()": FunctionFragment;
    "vault()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawFees(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS_DIVISOR"
      | "admin"
      | "approve"
      | "depositFee"
      | "ethTransferGasLimit"
      | "feeReserves"
      | "gov"
      | "increasePositionBufferBps"
      | "maxGlobalLongSizes"
      | "maxGlobalShortSizes"
      | "referralStorage"
      | "router"
      | "sendValue"
      | "setAdmin"
      | "setDepositFee"
      | "setEthTransferGasLimit"
      | "setGov"
      | "setIncreasePositionBufferBps"
      | "setMaxGlobalSizes"
      | "setReferralStorage"
      | "shortsTracker"
      | "vault"
      | "weth"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethTransferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePositionBufferBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalLongSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGlobalShortSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referralStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendValue",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthTransferGasLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncreasePositionBufferBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalSizes",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralStorage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shortsTracker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalLongSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGlobalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncreasePositionBufferBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortsTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)": EventFragment;
    "SetAdmin(address)": EventFragment;
    "SetDepositFee(uint256)": EventFragment;
    "SetEthTransferGasLimit(uint256)": EventFragment;
    "SetIncreasePositionBufferBps(uint256)": EventFragment;
    "SetMaxGlobalSizes(address[],uint256[],uint256[])": EventFragment;
    "SetReferralStorage(address)": EventFragment;
    "WithdrawFees(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DecreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreasePositionReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEthTransferGasLimit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetIncreasePositionBufferBps"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxGlobalSizes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralStorage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export interface DecreasePositionReferralEventObject {
  account: string;
  sizeDelta: BigNumber;
  marginFeeBasisPoints: BigNumber;
  referralCode: string;
  referrer: string;
}
export type DecreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  DecreasePositionReferralEventObject
>;

export type DecreasePositionReferralEventFilter =
  TypedEventFilter<DecreasePositionReferralEvent>;

export interface IncreasePositionReferralEventObject {
  account: string;
  sizeDelta: BigNumber;
  marginFeeBasisPoints: BigNumber;
  referralCode: string;
  referrer: string;
}
export type IncreasePositionReferralEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  IncreasePositionReferralEventObject
>;

export type IncreasePositionReferralEventFilter =
  TypedEventFilter<IncreasePositionReferralEvent>;

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface SetDepositFeeEventObject {
  depositFee: BigNumber;
}
export type SetDepositFeeEvent = TypedEvent<
  [BigNumber],
  SetDepositFeeEventObject
>;

export type SetDepositFeeEventFilter = TypedEventFilter<SetDepositFeeEvent>;

export interface SetEthTransferGasLimitEventObject {
  ethTransferGasLimit: BigNumber;
}
export type SetEthTransferGasLimitEvent = TypedEvent<
  [BigNumber],
  SetEthTransferGasLimitEventObject
>;

export type SetEthTransferGasLimitEventFilter =
  TypedEventFilter<SetEthTransferGasLimitEvent>;

export interface SetIncreasePositionBufferBpsEventObject {
  increasePositionBufferBps: BigNumber;
}
export type SetIncreasePositionBufferBpsEvent = TypedEvent<
  [BigNumber],
  SetIncreasePositionBufferBpsEventObject
>;

export type SetIncreasePositionBufferBpsEventFilter =
  TypedEventFilter<SetIncreasePositionBufferBpsEvent>;

export interface SetMaxGlobalSizesEventObject {
  tokens: string[];
  longSizes: BigNumber[];
  shortSizes: BigNumber[];
}
export type SetMaxGlobalSizesEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]],
  SetMaxGlobalSizesEventObject
>;

export type SetMaxGlobalSizesEventFilter =
  TypedEventFilter<SetMaxGlobalSizesEvent>;

export interface SetReferralStorageEventObject {
  referralStorage: string;
}
export type SetReferralStorageEvent = TypedEvent<
  [string],
  SetReferralStorageEventObject
>;

export type SetReferralStorageEventFilter =
  TypedEventFilter<SetReferralStorageEvent>;

export interface WithdrawFeesEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
}
export type WithdrawFeesEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawFeesEventObject
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface BasePositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasePositionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralStorage(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  feeReserves(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

  maxGlobalLongSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxGlobalShortSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralStorage(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  sendValue(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDepositFee(
    _depositFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEthTransferGasLimit(
    _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIncreasePositionBufferBps(
    _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalSizes(
    _tokens: PromiseOrValue<string>[],
    _longSizes: PromiseOrValue<BigNumberish>[],
    _shortSizes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralStorage(
    _referralStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shortsTracker(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shortsTracker(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DecreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): DecreasePositionReferralEventFilter;
    DecreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): DecreasePositionReferralEventFilter;

    "IncreasePositionReferral(address,uint256,uint256,bytes32,address)"(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): IncreasePositionReferralEventFilter;
    IncreasePositionReferral(
      account?: null,
      sizeDelta?: null,
      marginFeeBasisPoints?: null,
      referralCode?: null,
      referrer?: null
    ): IncreasePositionReferralEventFilter;

    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;

    "SetDepositFee(uint256)"(depositFee?: null): SetDepositFeeEventFilter;
    SetDepositFee(depositFee?: null): SetDepositFeeEventFilter;

    "SetEthTransferGasLimit(uint256)"(
      ethTransferGasLimit?: null
    ): SetEthTransferGasLimitEventFilter;
    SetEthTransferGasLimit(
      ethTransferGasLimit?: null
    ): SetEthTransferGasLimitEventFilter;

    "SetIncreasePositionBufferBps(uint256)"(
      increasePositionBufferBps?: null
    ): SetIncreasePositionBufferBpsEventFilter;
    SetIncreasePositionBufferBps(
      increasePositionBufferBps?: null
    ): SetIncreasePositionBufferBpsEventFilter;

    "SetMaxGlobalSizes(address[],uint256[],uint256[])"(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;
    SetMaxGlobalSizes(
      tokens?: null,
      longSizes?: null,
      shortSizes?: null
    ): SetMaxGlobalSizesEventFilter;

    "SetReferralStorage(address)"(
      referralStorage?: null
    ): SetReferralStorageEventFilter;
    SetReferralStorage(referralStorage?: null): SetReferralStorageEventFilter;

    "WithdrawFees(address,address,uint256)"(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      token?: null,
      receiver?: null,
      amount?: null
    ): WithdrawFeesEventFilter;
  };

  estimateGas: {
    BASIS_POINTS_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    ethTransferGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    increasePositionBufferBps(overrides?: CallOverrides): Promise<BigNumber>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralStorage(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shortsTracker(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS_DIVISOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethTransferGasLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeReserves(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePositionBufferBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalLongSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGlobalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendValue(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDepositFee(
      _depositFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEthTransferGasLimit(
      _ethTransferGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIncreasePositionBufferBps(
      _increasePositionBufferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalSizes(
      _tokens: PromiseOrValue<string>[],
      _longSizes: PromiseOrValue<BigNumberish>[],
      _shortSizes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralStorage(
      _referralStorage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shortsTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
