/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenManagerInterface extends utils.Interface {
  functions: {
    "actionsNonce()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256,uint256)": FunctionFragment;
    "approveNFT(address,address,uint256,uint256)": FunctionFragment;
    "approveNFTs(address,address,uint256[],uint256)": FunctionFragment;
    "initialize(address[])": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "minAuthorizations()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "receiveNFTs(address,address,uint256[])": FunctionFragment;
    "setAdmin(address,address,uint256)": FunctionFragment;
    "setGov(address,address,address,uint256)": FunctionFragment;
    "signApprove(address,address,uint256,uint256)": FunctionFragment;
    "signApproveNFT(address,address,uint256,uint256)": FunctionFragment;
    "signApproveNFTs(address,address,uint256[],uint256)": FunctionFragment;
    "signSetAdmin(address,address,uint256)": FunctionFragment;
    "signSetGov(address,address,address,uint256)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signalApproveNFT(address,address,uint256)": FunctionFragment;
    "signalApproveNFTs(address,address,uint256[])": FunctionFragment;
    "signalSetAdmin(address,address)": FunctionFragment;
    "signalSetGov(address,address,address)": FunctionFragment;
    "signedActions(address,bytes32)": FunctionFragment;
    "signers(uint256)": FunctionFragment;
    "signersLength()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "actionsNonce"
      | "admin"
      | "approve"
      | "approveNFT"
      | "approveNFTs"
      | "initialize"
      | "isInitialized"
      | "isSigner"
      | "minAuthorizations"
      | "pendingActions"
      | "receiveNFTs"
      | "setAdmin"
      | "setGov"
      | "signApprove"
      | "signApproveNFT"
      | "signApproveNFTs"
      | "signSetAdmin"
      | "signSetGov"
      | "signalApprove"
      | "signalApproveNFT"
      | "signalApproveNFTs"
      | "signalSetAdmin"
      | "signalSetGov"
      | "signedActions"
      | "signers"
      | "signersLength"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "actionsNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFTs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNFTs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signApproveNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signApproveNFTs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signSetAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signSetGov",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApproveNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApproveNFTs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedActions",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signersLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "actionsNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApproveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApproveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signSetAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signSetGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApproveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApproveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signersLength",
    data: BytesLike
  ): Result;

  events: {
    "ClearAction(bytes32,uint256)": EventFragment;
    "SignAction(bytes32,uint256)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32,uint256)": EventFragment;
    "SignalApproveNFT(address,address,uint256,bytes32,uint256)": EventFragment;
    "SignalApproveNFTs(address,address,uint256[],bytes32,uint256)": EventFragment;
    "SignalPendingAction(bytes32,uint256)": EventFragment;
    "SignalSetAdmin(address,address,bytes32,uint256)": EventFragment;
    "SignalSetGov(address,address,address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApproveNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApproveNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetGov"): EventFragment;
}

export interface ClearActionEventObject {
  action: string;
  nonce: BigNumber;
}
export type ClearActionEvent = TypedEvent<
  [string, BigNumber],
  ClearActionEventObject
>;

export type ClearActionEventFilter = TypedEventFilter<ClearActionEvent>;

export interface SignActionEventObject {
  action: string;
  nonce: BigNumber;
}
export type SignActionEvent = TypedEvent<
  [string, BigNumber],
  SignActionEventObject
>;

export type SignActionEventFilter = TypedEventFilter<SignActionEvent>;

export interface SignalApproveEventObject {
  token: string;
  spender: string;
  amount: BigNumber;
  action: string;
  nonce: BigNumber;
}
export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  SignalApproveEventObject
>;

export type SignalApproveEventFilter = TypedEventFilter<SignalApproveEvent>;

export interface SignalApproveNFTEventObject {
  token: string;
  spender: string;
  tokenId: BigNumber;
  action: string;
  nonce: BigNumber;
}
export type SignalApproveNFTEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  SignalApproveNFTEventObject
>;

export type SignalApproveNFTEventFilter =
  TypedEventFilter<SignalApproveNFTEvent>;

export interface SignalApproveNFTsEventObject {
  token: string;
  spender: string;
  tokenIds: BigNumber[];
  action: string;
  nonce: BigNumber;
}
export type SignalApproveNFTsEvent = TypedEvent<
  [string, string, BigNumber[], string, BigNumber],
  SignalApproveNFTsEventObject
>;

export type SignalApproveNFTsEventFilter =
  TypedEventFilter<SignalApproveNFTsEvent>;

export interface SignalPendingActionEventObject {
  action: string;
  nonce: BigNumber;
}
export type SignalPendingActionEvent = TypedEvent<
  [string, BigNumber],
  SignalPendingActionEventObject
>;

export type SignalPendingActionEventFilter =
  TypedEventFilter<SignalPendingActionEvent>;

export interface SignalSetAdminEventObject {
  target: string;
  admin: string;
  action: string;
  nonce: BigNumber;
}
export type SignalSetAdminEvent = TypedEvent<
  [string, string, string, BigNumber],
  SignalSetAdminEventObject
>;

export type SignalSetAdminEventFilter = TypedEventFilter<SignalSetAdminEvent>;

export interface SignalSetGovEventObject {
  timelock: string;
  target: string;
  gov: string;
  action: string;
  nonce: BigNumber;
}
export type SignalSetGovEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  SignalSetGovEventObject
>;

export type SignalSetGovEventFilter = TypedEventFilter<SignalSetGovEvent>;

export interface TokenManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    actionsNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _signers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minAuthorizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveNFTs(
      _token: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    signersLength(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNFT(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveNFTs(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _signers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isSigner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

  pendingActions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  receiveNFTs(
    _token: PromiseOrValue<string>,
    _sender: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _target: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _timelock: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signApprove(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signApproveNFT(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signApproveNFTs(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signSetAdmin(
    _target: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signSetGov(
    _timelock: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalApproveNFT(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalApproveNFTs(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetAdmin(
    _target: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetGov(
    _timelock: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signedActions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  signersLength(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _signers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveNFTs(
      _token: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    signersLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClearAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): ClearActionEventFilter;
    ClearAction(action?: null, nonce?: null): ClearActionEventFilter;

    "SignAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): SignActionEventFilter;
    SignAction(action?: null, nonce?: null): SignActionEventFilter;

    "SignalApprove(address,address,uint256,bytes32,uint256)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): SignalApproveEventFilter;
    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): SignalApproveEventFilter;

    "SignalApproveNFT(address,address,uint256,bytes32,uint256)"(
      token?: null,
      spender?: null,
      tokenId?: null,
      action?: null,
      nonce?: null
    ): SignalApproveNFTEventFilter;
    SignalApproveNFT(
      token?: null,
      spender?: null,
      tokenId?: null,
      action?: null,
      nonce?: null
    ): SignalApproveNFTEventFilter;

    "SignalApproveNFTs(address,address,uint256[],bytes32,uint256)"(
      token?: null,
      spender?: null,
      tokenIds?: null,
      action?: null,
      nonce?: null
    ): SignalApproveNFTsEventFilter;
    SignalApproveNFTs(
      token?: null,
      spender?: null,
      tokenIds?: null,
      action?: null,
      nonce?: null
    ): SignalApproveNFTsEventFilter;

    "SignalPendingAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): SignalPendingActionEventFilter;
    SignalPendingAction(
      action?: null,
      nonce?: null
    ): SignalPendingActionEventFilter;

    "SignalSetAdmin(address,address,bytes32,uint256)"(
      target?: null,
      admin?: null,
      action?: null,
      nonce?: null
    ): SignalSetAdminEventFilter;
    SignalSetAdmin(
      target?: null,
      admin?: null,
      action?: null,
      nonce?: null
    ): SignalSetAdminEventFilter;

    "SignalSetGov(address,address,address,bytes32,uint256)"(
      timelock?: null,
      target?: null,
      gov?: null,
      action?: null,
      nonce?: null
    ): SignalSetGovEventFilter;
    SignalSetGov(
      timelock?: null,
      target?: null,
      gov?: null,
      action?: null,
      nonce?: null
    ): SignalSetGovEventFilter;
  };

  estimateGas: {
    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _signers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveNFTs(
      _token: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signersLength(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    actionsNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _signers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuthorizations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveNFTs(
      _token: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalApproveNFT(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalApproveNFTs(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetGov(
      _timelock: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signersLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
